'use client';

import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Navigation from '../components/Navigation';

type Track = {
  title: string;
  url: string;
};

type Genre = {
  name: string;
  description: string;
  services: string[];
  pricing: string;
  tracks: Track[];
};

function AudioPlayer({ tracks }: { tracks: Track[] }) {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const audioRef = useRef<HTMLAudioElement>(null);

  const handleTimeUpdate = () => {
    if (audioRef.current) {
      setCurrentTime(audioRef.current.currentTime);
    }
  };

  const handleLoadedMetadata = () => {
    if (audioRef.current) {
      setDuration(audioRef.current.duration);
    }
  };

  const handleEnded = () => {
    if (currentTrackIndex < tracks.length - 1) {
      setCurrentTrackIndex(prev => prev + 1);
    } else {
      setIsPlaying(false);
    }
  };

  useEffect(() => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.play();
      } else {
        audioRef.current.pause();
      }
    }
  }, [isPlaying, currentTrackIndex]);

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (audioRef.current) {
      const bounds = e.currentTarget.getBoundingClientRect();
      const percent = (e.clientX - bounds.left) / bounds.width;
      audioRef.current.currentTime = percent * duration;
    }
  };

  const playTrack = (index: number) => {
    setCurrentTrackIndex(index);
    setIsPlaying(true);
  };

  return (
    <div className="bg-gray-900 rounded-lg p-4 space-y-4">
      <audio
        ref={audioRef}
        src={tracks[currentTrackIndex].url}
        onTimeUpdate={handleTimeUpdate}
        onLoadedMetadata={handleLoadedMetadata}
        onEnded={handleEnded}
      />
      
      {/* Current Track Info */}
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className="text-lg font-semibold text-white">
            {tracks[currentTrackIndex].title}
          </h3>
          <p className="text-sm text-gray-400">
            Track {currentTrackIndex + 1} of {tracks.length}
          </p>
        </div>
      </div>

      {/* Progress Bar */}
      <div 
        className="h-2 bg-gray-700 rounded-full cursor-pointer overflow-hidden"
        onClick={handleProgressClick}
      >
        <div 
          className="h-full bg-red-500 transition-all duration-100"
          style={{ width: `${(currentTime / duration) * 100}%` }}
        />
      </div>

      {/* Time Display */}
      <div className="flex justify-between text-sm text-gray-400">
        <span>{formatTime(currentTime)}</span>
        <span>{formatTime(duration)}</span>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-center space-x-4">
        <button
          className="p-2 text-white hover:text-red-500 transition-colors"
          onClick={() => currentTrackIndex > 0 && setCurrentTrackIndex(prev => prev - 1)}
        >
          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button
          className="p-3 bg-red-500 rounded-full text-white hover:bg-red-600 transition-colors"
          onClick={() => setIsPlaying(!isPlaying)}
        >
          {isPlaying ? (
            <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6" />
            </svg>
          ) : (
            <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          )}
        </button>
        <button
          className="p-2 text-white hover:text-red-500 transition-colors"
          onClick={() => currentTrackIndex < tracks.length - 1 && setCurrentTrackIndex(prev => prev + 1)}
        >
          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>

      {/* Playlist */}
      <div className="mt-6">
        <h4 className="text-lg font-semibold text-white mb-2">Playlist</h4>
        <div className="space-y-2 max-h-48 overflow-y-auto custom-scrollbar">
          {tracks.map((track, index) => (
            <div
              key={index}
              className={`p-3 rounded-lg cursor-pointer transition-colors ${
                currentTrackIndex === index
                  ? 'bg-red-500 text-white'
                  : 'bg-gray-800 hover:bg-gray-700 text-gray-300'
              }`}
              onClick={() => playTrack(index)}
            >
              <div className="flex items-center">
                <div className="mr-3">
                  {currentTrackIndex === index && isPlaying ? (
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" />
                    </svg>
                  ) : (
                    <span>{index + 1}</span>
                  )}
                </div>
                <div className="flex-1">
                  <p className="font-medium">{track.title}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

const SAMPLE_TRACKS = {
  electronic: [
    { title: 'Deep House Groove', url: 'https://cdn.pixabay.com/download/audio/2022/05/27/audio_1808fbf07a.mp3' },
    { title: 'Tech House Beat', url: 'https://cdn.pixabay.com/download/audio/2022/03/10/audio_c8c8395384.mp3' },
    { title: 'EDM Energy', url: 'https://cdn.pixabay.com/download/audio/2022/08/02/audio_2dde668d05.mp3' }
  ],
  hiphop: [
    { title: 'Trap Beat', url: 'https://cdn.pixabay.com/download/audio/2022/11/22/audio_febc526d62.mp3' },
    { title: 'Urban Flow', url: 'https://cdn.pixabay.com/download/audio/2022/10/25/audio_f8c7e15196.mp3' }
  ],
  pop: [
    { title: 'Summer Vibes', url: 'https://cdn.pixabay.com/download/audio/2023/06/13/audio_8124b67744.mp3' },
    { title: 'Feel Good Pop', url: 'https://cdn.pixabay.com/download/audio/2023/03/06/audio_b86400f4b1.mp3' }
  ]
};

const genreDetails: Record<string, Genre> = {
  'Electronic': {
    name: 'Electronic Music Production',
    description: 'From EDM to ambient electronica, we craft cutting-edge electronic music with modern production techniques.',
    services: ['Sound Design', 'Beat Programming', 'Synth Programming', 'Mixing & Mastering'],
    pricing: 'Starting at $500 per track',
    tracks: SAMPLE_TRACKS.electronic
  },
  'Hip Hop': {
    name: 'Hip Hop Production',
    description: 'Professional hip hop production combining classic beats with modern trap elements.',
    services: ['Beat Making', 'Sample Clearance', 'Vocal Processing', 'Mix & Master'],
    pricing: 'Starting at $400 per track',
    tracks: SAMPLE_TRACKS.hiphop
  },
  'R&B': {
    name: 'R&B Production',
    description: 'Smooth R&B production with rich harmonies and professional vocal arrangements.',
    services: ['Vocal Arrangement', 'Live Instruments', 'Beat Production', 'Full Mix'],
    pricing: 'Starting at $450 per track',
    tracks: [
      { title: 'Soul Groove', url: 'https://cdn.pixabay.com/download/audio/2022/03/11/audio_270cda6a6d.mp3' },
      { title: 'Smooth Melody', url: 'https://cdn.pixabay.com/download/audio/2023/03/06/audio_b86400f4b1.mp3' }
    ]
  },
  'Pop': {
    name: 'Pop Music Production',
    description: 'Contemporary pop production with radio-ready sound quality.',
    services: ['Songwriting', 'Top-line Melody', 'Arrangement', 'Final Mix'],
    pricing: 'Starting at $600 per track',
    tracks: SAMPLE_TRACKS.pop
  },
  'House': {
    name: 'House Music Production',
    description: 'Deep, tech, and progressive house production with professional quality.',
    services: ['Beat Programming', 'Sound Design', 'Arrangement', 'Mixdown'],
    pricing: 'Starting at $500 per track',
    tracks: [
      { title: 'Deep House Vibes', url: 'https://cdn.pixabay.com/download/audio/2022/05/17/audio_69a61cd6d8.mp3' },
      { title: 'Club Energy', url: 'https://cdn.pixabay.com/download/audio/2022/03/10/audio_c8c8395384.mp3' }
    ]
  },
  'Ambient': {
    name: 'Ambient Music Production',
    description: 'Atmospheric and textural ambient music for various applications.',
    services: ['Sound Design', 'Field Recording', 'Arrangement', 'Mastering'],
    pricing: 'Starting at $400 per track',
    tracks: [
      { title: 'Peaceful Atmosphere', url: 'https://cdn.pixabay.com/download/audio/2022/10/30/audio_347701bËøù.mp3' },
      { title: 'Ethereal Dreams', url: 'https://cdn.pixabay.com/download/audio/2023/01/16/audio_1ca387e31d.mp3' }
    ]
  }
};

export default function MusicPage() {
  const [selectedGenre, setSelectedGenre] = useState<string | null>(null);

  return (
    <>
      <Navigation />
      <div className="pt-20 min-h-screen px-4">
        <div className="max-w-6xl mx-auto">
          <h1 className="text-4xl md:text-5xl font-bold mb-8 text-center">My Music</h1>
          
          {/* Music Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
            {/* Spotify Playlist */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h2 className="text-2xl font-semibold mb-4">Latest Release</h2>
              <div className="w-full">
                <iframe 
                  data-testid="embed-iframe" 
                  style={{ borderRadius: '12px' }}
                  src="https://open.spotify.com/embed/track/0d7Z105K4L8JDe6vIJz3no?utm_source=generator" 
                  width="100%" 
                  height="400" 
                  frameBorder="0" 
                  allowFullScreen 
                  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                  loading="lazy"
                />
              </div>
            </div>

            {/* SoundCloud Tracks */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h2 className="text-2xl font-semibold mb-4">Featured Tracks</h2>
              <div className="w-full">
                <iframe 
                  width="100%" 
                  height="400" 
                  scrolling="no" 
                  frameBorder="no" 
                  allow="autoplay" 
                  src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/2068620114%3Fsecret_token%3Ds-c1unCnEYCco&color=%23201b15&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"
                />
                <div style={{ 
                  fontSize: '10px', 
                  color: '#cccccc', 
                  lineBreak: 'anywhere',
                  wordBreak: 'normal',
                  overflow: 'hidden',
                  whiteSpace: 'nowrap',
                  textOverflow: 'ellipsis', 
                  fontFamily: 'Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif',
                  fontWeight: 100
                }}>
                  <a 
                    href="https://soundcloud.com/by_tranquility" 
                    title="TRANQUiLiTY" 
                    target="_blank"
                    rel="noopener noreferrer" 
                    style={{ color: '#cccccc', textDecoration: 'none' }}
                  >
                    TRANQUiLiTY
                  </a> ¬∑ 
                  <a 
                    href="https://soundcloud.com/by_tranquility/sets/featured-tracks/s-c1unCnEYCco" 
                    title="Featured Tracks" 
                    target="_blank"
                    rel="noopener noreferrer" 
                    style={{ color: '#cccccc', textDecoration: 'none' }}
                  >
                    Featured Tracks
                  </a>
                </div>
              </div>
            </div>
          </div>

          {/* Genre Categories */}
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-12">
            {Object.keys(genreDetails).map((genre) => (
              <motion.div
                key={genre}
                className="bg-gray-800 hover:bg-gray-700 rounded-lg p-6 cursor-pointer transition-colors"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setSelectedGenre(genre)}
              >
                <h3 className="text-xl font-semibold mb-2">{genre}</h3>
                <p className="text-gray-400">Explore our {genre.toLowerCase()} productions</p>
              </motion.div>
            ))}
          </div>

          {/* Modal */}
          <AnimatePresence>
            {selectedGenre && (
              <>
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50"
                  onClick={() => setSelectedGenre(null)}
                />
                <motion.div
                  initial={{ opacity: 0, scale: 0.95, y: 20 }}
                  animate={{ opacity: 1, scale: 1, y: 0 }}
                  exit={{ opacity: 0, scale: 0.95, y: 20 }}
                  className="fixed left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-[90%] max-w-[500px] bg-gray-800 rounded-xl p-6 z-50"
                >
                  {selectedGenre && (
                    <>
                      <button
                        onClick={() => setSelectedGenre(null)}
                        className="absolute top-4 right-4 text-gray-400 hover:text-white"
                      >
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                      <h2 className="text-2xl font-bold mb-4">{genreDetails[selectedGenre].name}</h2>
                      <div className="mb-6">
                        <AudioPlayer tracks={genreDetails[selectedGenre].tracks} />
                      </div>
                      <p className="text-gray-300 mb-6">{genreDetails[selectedGenre].description}</p>
                      <div className="mb-6">
                        <h3 className="text-lg font-semibold mb-2">Services Included:</h3>
                        <ul className="list-disc list-inside text-gray-300">
                          {genreDetails[selectedGenre].services.map((service) => (
                            <li key={service}>{service}</li>
                          ))}
                        </ul>
                      </div>
                      <div className="border-t border-gray-700 pt-4">
                        <p className="text-xl font-semibold text-red-500">{genreDetails[selectedGenre].pricing}</p>
                      </div>
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        className="mt-6 w-full bg-red-600 hover:bg-red-700 text-white py-3 rounded-lg font-semibold transition-colors"
                        onClick={() => window.location.href = '/contact'}
                      >
                        Get Started
                      </motion.button>
                    </>
                  )}
                </motion.div>
              </>
            )}
          </AnimatePresence>
        </div>
      </div>
    </>
  );
}
